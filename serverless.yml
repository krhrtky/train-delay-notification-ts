service:
  name: train-delay-notification
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-scheduler

custom:
  dynamodb:
    stages:
      - ${self:provider.stage, "dev"}
    start:
      port: 8000
      inMemory: true
      migrate: true

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, "dev"}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

provider:
  name: aws
  runtime: nodejs8.10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, "dev"}
    SLACK_API_END_POINT: ${file(../config.${self:provider.stage}.json):SLACK_API_END_POINT}
    ALLOW_ORIGIN: ${file(../config.${self:provider.stage}.json):ALLOW_ORIGIN, '*'}

functions:
  findAll:
    handler: src/controller/linesController.findAll
    events:
      - http:
          method: get
          path: lines
          cors:
            origins:
              - ${self:provider.environment.ALLOW_ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
    layers:
      - {Ref: LayerLambdaLayer}
  findByLineName:
    handler: src/controller/linesController.findByLineName
    events:
      - http:
          method: get
          path: lines/{lineName}
          cors:
            origins:
              - ${self:provider.environment.ALLOW_ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
    layers:
      - {Ref: LayerLambdaLayer}
  update:
    handler: src/controller/linesController.update
    events:
      - http:
          method: put
          path: lines/{lineName}
          cors:
            origins:
              - ${self:provider.environment.ALLOW_ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
    layers:
      - {Ref: LayerLambdaLayer}
  batch:
    handler: src/controller/batchController.execute
    events:
      - schedule: cron(0/60 0-12 ? * * *)
      - schedule: cron(0/60 21-23 ? * * *)
    layers:
      - {Ref: LayerLambdaLayer}

layers:
  layer:
    path: layer
    compatibleRuntimes:
      - nodejs8.10
