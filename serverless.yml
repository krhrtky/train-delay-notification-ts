service:
  name: train-delay-notification
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - ${self:provider.stage, "dev"}
    start:
      port: 8000
      inMemory: true
      migrate: true

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, "dev"}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

provider:
  name: aws
  runtime: nodejs10.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        -  dynamodb:Query
        -  dynamodb:Scan
        -  dynamodb:GetItem
        -  dynamodb:PutItem
        -  dynamodb:UpdateItem
        -  dynamodb:DeleteItem
      Resopurce: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, "dev"}

functions:
  findAll:
    handler: src/controller/linesController.findAll
    events:
      - http:
          method: get
          path: lines

  findByLineName:
    handler: src/controller/linesController.findByLineName
    events:
      - http:
          method: get
          path: lines/{lineName}

  update:
    handler: src/controller/linesController.update
    events:
      - http:
          method: put
          path: lines/{lineName}
